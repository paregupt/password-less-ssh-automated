#!/usr/bin/expect
###############################################################################
# Script to automate password-less SSH among many servers.
# The script:
#   - Logs into servers from the server_list list.
#   - Generates SSH keys
#   - Uploads the public key to all other servers from the server_list list 
#
# Usage:
#   Edit server_list to specific IP address or hostname of servers. Save and
#   run the script using expect <filename>. The script will ask password to
#   login to the servers. Local user is used by default.
#
# Assumption:
#   Same user and password on all servers. Script can be enhanced
#   for different user/password on different servers
#
# Requirements:
#   Expect
#
# Last update:
#   14-Sept-2019
###############################################################################

set prompt {[#>$] }
set user $env(USER)
set this_host $env(HOSTNAME)
set server_list {server1 server2 server3 server4 server5 server6 server7 server8 server9 server10}

# Ask user for password, in case password-less SSH not enabled
stty -echo
send "Password:"
expect {
    -re "(.*)\n" {
        send "\n"
        set passwd $expect_out(1,string)
        send "Confirm:"
        expect {
            -re "(.*)\n" {
                send "\n"
                if ![string match $passwd $expect_out(1,string)] {
                    send_user "Password mismatch\n"
                    stty echo
                    exit
                }
            }
            timeout {
                send_user "\n---Timeout---\n"
                exit
            }
        }
    }
    timeout {
        send_user "\n---Timeout---\n"
        exit
    }
}
stty echo

foreach server_host $server_list {
    spawn ssh $user@$server_host
    expect {
        "*\\(yes/no\\)? " {
            send "yes\n"
            exp_continue
        }
        "*password:" {
            send "$passwd\n"
            exp_continue
        }
        timeout {
            send_user "SSH timed out from $this_host to $server_host"
            continue
        }
        -re $prompt {
            # Generate RSA Key
            send "ssh-keygen -t rsa\n"
            expect -re "id_rsa\\): "
            send "\n"
            expect {
               "Overwrite (y/n)" {
                    send "n\n"
                }
                expect -re "passphrase\\): " {
                    send "\n"
                    exp_continue
                }
                expect -re "again: " {
                    send "\n"
                }
            }
            expect -re $prompt

            # Create .ssh directory. Ideally, this directory should already exist
            foreach server $server_list {
                if [string match $server_host $server] {
                    # DO not create directory on local machine
                    continue
                }
                send "ssh $user@$server mkdir -p .ssh\n"
                expect {
                    "*\\(yes/no\\)? " {
                        send "yes\n"
                        exp_continue
                    }
                    "*password:" {
                        send "$passwd\n"
                    }
                    timeout {
                        send_user "SSH timed out from $server_host to $server"
                        continue
                    }
                    -re $prompt {}
                }
            }

            # Copy public key to authorized_keys on remote server
            foreach server $server_list {
                if [string match $server_host $server] {
                    # Do not copy keys to local machine
                    continue
                }
                send "ssh-copy-id -i .ssh/id_rsa.pub $user@$server\n"
                expect {
                    "*\\(yes/no\\)? " {
                        send "yes\n"
                        exp_continue
                    }
                    "*password: " {
                        send "$passwd\n"
                    }
                    timeout {
                        send_user "SSH timed out from $server_host to $server"
                        continue
                    }
                    -re $prompt {}
                }
            }
        }
    }
    send "\n"
    send "exit\n"
    expect -re $prompt
}
